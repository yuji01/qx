# 这是圈x的配置文件
# 以 ";" 或 "#" 或 "//" 开头的行为注释行。
# SS-URI 方案可以在 https://shadowsocks.org/en/spec/SIP002-URI-Scheme.html 找到
# Quantumult 使用 HEAD 方法向 server_check_url 发送 HTTP 请求来测试代理的状态，结果应该是两个延迟，第一个是与代理服务器的 TCP 握手，第二个是 HTTP 延迟（Quantumult 成功接收到 HTTP 之间的持续时间 来自 server_check_url 的响应和 Quantumult 开始向 server_check_url 发送 HTTP 请求）。 闪电图标表示 TCP 快开成功。 如果 [server_local] 部分或 [server_remote] 部分中的服务器有自己的 server_check_url，则将使用其自己的 server_check_url 代替 [general] 部分中的 server_check_url。
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试（测试结果为通过该节点访问此网页的 HTTP 延迟, 即 HTTP 响应时间与 HTTP 请求发起时间的差值），来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页的 HTTP 延迟。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
# dns_exclusion_list 包含禁用占位符 IP(198.18.0.0/15) 映射机制的域。 不在 dns_exclusion_list 中的域启用了占位符 IP 映射机制，并具有所谓的“resolve-on-remote”效果。 dns_exclusion_list 中域的 DNS 查询可能会也可能不会遵循 [dns] 部分中的设置。
# udp_whitelist 包含目的 UDP 端口，为空表示所有端口都在 udp_whitelist 中。 目的端口不在 udp_whitelist 中的 UDP 数据包（通过 Quantumult 隧道接口）将被丢弃，并且 ICMP（端口不可达）消息将被发回。 此设置与过滤规则或策略无关，也与代理（服务器）端口无关。
# udp_drop_list 包含目的 UDP 端口，机制类似于 udp_whitelist 丢弃 UDP 数据包，但不会发回 ICMP 消息。 只有 udp_whitelist 允许的 UDP 数据包才能被 udp_drop_list 捕获。
# Quantumult 不会处理到excluded_routes 的流量。 修改后最好重启设备。
# 默认情况下（“loopback”），当域在 DNS 级别拒绝时，将返回环回 IP 响应，您可以通过将 dns_reject_domain_behavior 设置为“no-error-no-answer”或“nxdomain”来更改此行为。 这会将行为更改为响应 NOERROR NOANSWER 响应或响应 NXDOMAIN 响应。 如果将被拒绝的域更改为不被拒绝（通过更改配置、过滤器或策略），最多可能需要 10 秒才能生效（TTL 10）。
# resource_parser_url 示例可以在 https://raw.githubusercontent.com/crossutility/Quantumult-X/master/resource-parser.js 找到
# 只有小于或等于 5000（毫秒）时才会考虑 server_check_timeout 值。 该值与包括 DNS 查询、TCP 握手、TLS 握手和应用层 HTTP 会话持续时间在内的检查过程的总持续时间进行比较，因此总持续时间可能明显长于“TCP 握手”和“HTTP 会话持续时间” .
#
[general]
# 代理延迟测速 URL，对指定的网址进行相应测试，以确认节点的可用性
server_check_url=http://www.gstatic.com/generate_204
# 资源解析器，后面会用到
resource_parser_url=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js
#
;profile_img_url =http://www.example.com/example.png
;resource_parser_url =http://www.example.com/parser.js
;network_check_url =http://bing.com
;server_check_url =http://www.google.com/generate_204
;server_check_user_agent = Agent/1.0
;server_check_timeout = 5000
;doh_user_agent = Agent/1.0
;geo_location_checker = http://www.example.com/json/, https://www.example.com/script.js
;running_mode_trigger = filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct
dns_exclusion_list = *.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me
;dns_reject_domain_behavior = loopback
;ssid_suspended_list = LINK_22E174, LINK_22E175
;udp_whitelist = 53, 123, 1900, 80-443
;udp_drop_list = 1900, 80
#
# 下列表中内容将不经过 QuantumultX 的处理
excluded_routes = 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8
icmp_auto_reply = true
#
# 从当前网络（系统）获取的 DNS 服务器将始终用于更好的性能（您可以使用“no-system”禁用此功能，但您至少应该添加一个自定义 DNS 服务器，如“server=223.5.5.5”） .
# 当设置 no-ipv6 时，Quantumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败，但仍然允许来自 IPv6 DNS 服务器的 A 查询。
# 查询结果仅用于评估过滤器或通过直接策略连接，通过服务器连接时不会使用结果，Quantumult永远不会知道相关域的目标IP。
# 当设置了 prefer-doh3 时，DoH 查询将尝试 DNS over HTTP3，如果失败则查询连接将回退到 HTTP2。 由于 HTTP/2 和 HTTP/3 连接支持多路复用，因此当您更改此设置时，可能不会立即生效，但您可以重新连接 Quantumult X Tunnel 或手动更改网络环境使其立即生效。
# 当设置了 doh-server (DNS over HTTPS) 时，系统和所有其他常规（没有绑定特定域）服务器将被忽略。 DoQ 的默认端口是 853，如果双方同意使用另一个端口，例如 456，您可以将其设置为 quic://dns.example.com:456
# 设置 doq-server (DNS over QUIC) 时，doh-server 和 system 以及所有其他常规（没有绑定特定域）服务器将被忽略。
# 多个（并发查询）doq-server(s) 应该在一行中配置，并且 URL 应该用逗号分隔。
# 多个（并发查询）doh-server(s) 应该在一行中配置，并且 URL 应该用逗号分隔。 如果 iOS 版本 < iOS 13.0，doh-server 的最大数量将被限制为 1。如果 iOS 版本 < iOS 15.0，doh-server 的最大数量将被限制为 2。
# 当使用的 doh-server 不是基于 HTTP/2 时，DoH 将被暂时禁用，并且将使用常规服务器，直到下一次 VPN 连接开始。
#特地直接给一个域设置127.0.0.1，这里是不允许的。如果您希望某个域（例如：example.com）为127.0.0.1，只需在“filter_local”部分添加“host，example.com，reject”。 拒绝操作将向查询返回带有 127.0.0.1 的 DNS 响应。
#
[dns]
;prefer-doh3
;no-system
no-ipv6
# 阿里dns
server = 223.5.5.5
# 114公共dns
server = 114.114.114.114
# 腾讯dns
server = 119.29.29.29
server = 119.28.28.28
# 谷歌dns
server = 8.8.8.8
#
# 设置DoH服务器后，所有其他常规DNS服务器设置将被忽略；当设置了多个DoH服务器时，只会使用第一个；当使用的 DoH服务器不是基于HTTP/2时，DoH将被暂时禁用。
# 腾讯DoH服务器,阿里DoH服务器,360DoH服务器,CFIEC DoH服务器,红鱼rubyfish DoH服务器,Google DoH服务器,CloudFlare DoH服务器,quad9 DoH服务器,DNS.SB DoH服务器
doh-server = https://doh.pub/dns-query, https://1.12.12.12/dns-query, https://120.53.53.53/dns-query, https://dns.alidns.com/dns-query, https://223.5.5.5/dns-query, https://223.6.6.6/dns-query, https://doh.360.cn, https://dns.cfiec.net/dns-query, https://rubyfish.cn/dns-query, https://dns.rubyfish.cn/dns-query, https://dns.google/dns-query, https://1.1.1.1/dns-query, https://1.0.0.1/dns-query, https://cloudflare-dns.com/dns-query, https://dns.quad9.net/dns-query, https://doh.dns.sb/dns-query, https://doh.sb/dns-query
#
;doq-server = quic://dns.adguard.com
;doq-server = quic://dns1.example.com, quic://dns2.example.com
;doq-server = quic://dns.adguard.com, excluded_ssids=SSID1
;doq-server = quic://dns.adguard.com, included_ssids=SSID2
;doh-server = https://dns.alidns.com/dns-query
;doh-server = https://exmaple1.com/dns-query, https://exmaple2.com/dns-query
;doh-server = https://223.6.6.6/dns-query, excluded_ssids=SSID1
;doh-server = https://223.5.5.5/dns-query, included_ssids=SSID2
# 制定域名解析 dns
server=/*.taobao.com/223.5.5.5
server=/*.tmall.com/223.5.5.5
server=/*.alipay.com/223.5.5.5
server=/*.aliyun.com/223.5.5.5
server=/*.jd.com/119.28.28.28
server=/*.qq.com/119.28.28.28
server=/*.tencent.com/119.28.28.28
server=/*.weixin.com/119.28.28.28
server=/*.bilibili.com/119.29.29.29
server=/*.netease.com/119.29.29.29
server=/*testflight.apple.com/23.76.66.98
#
;server = 8.8.8.8:53, excluded_ssids=SSID1
;server = 8.8.4.4:53, included_ssids=SSID2
;server = /example0.com/system
;server = /example1.com/8.8.4.4
;server = /*.example2.com/223.5.5.5
;doh-server = /*.example3.com/https://doh.pub/dns-query, excluded_ssids=SSID2
;doq-server = /*.example4.com/quic://dns.adguard.com, excluded_ssids=SSID3
;server = /example4.com/[2001:4860:4860::8888]:53
;address = /example5.com/192.168.16.18
;address = /example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]
;alias = /example7.com/another-example.com

#
# 静态策略指向您手动选择的候选项中的服务器。
# 可用策略根据server_check_url指向候选中第一个可用的服务器（当策略被触发并且策略结果不可用时，将立即启动并发url延迟测试。如果当时没有网络请求正在采取该策略，这意味着 策略处于空闲状态，即使服务器宕机也不会启动测试，此时可以通过手动启动测试来更新服务器状态，但没有任何意义）。
# 循环策略指向候选下一个连接的下一个服务器。
# dest-hash 策略根据使用目标地址（域或 IP）作为输入的哈希函数指向服务器。 此策略对于需要会话持久性的用例特别有用。 从策略中添加或删除服务器可能会改变结果。
# url-latency-benchmark 策略指向具有最佳（将考虑参数容差 ms）url 延迟结果的服务器。 当用户手动启动 Quantumult X 容器应用中的 url 测试时，策略结果也会更新。 这种类型的策略有一个称为检查间隔（秒）的参数，如果这个策略已经被任何请求激活，那么间隔将被考虑。 如果活动检查为真，则即使策略处于空闲状态，仍将考虑间隔并启动基准测试。
# ssid 策略根据网络环境指向服务器。
# 参数 resource-tag-regex 和 server-tag-regex 仅适用于静态、可用和循环类型的策略。
#
[policy]
static=节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, proxy, direct, reject, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Airport.png
# 主节点，相当于总开关
#
# 筛选香港节点
static=香港节点, server-tag-regex=香港|🇭🇰|HK|hk|Hong Kong, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/HK.png
# 筛选台湾节点
static=台湾节点, server-tag-regex=台湾|TW|tw|Taiwan, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/TW.png
# 筛选日本节点
static=日本节点, server-tag-regex=日本|🇯🇵|JP|jp|Japan, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/JP.png
# 筛选新加坡节点
static=新加坡节点, server-tag-regex=新加坡|🇸🇬|SG|sg|Singapore, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/SG.png
# 筛选美国节点
static=美国节点, server-tag-regex=美国|🇺🇸|US|us|United States, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/US.png
# Apple策略组
static=Apple, direct, proxy, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Apple.png
# 哔哩哔哩策略组
static=哔哩哔哩, direct, proxy, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/bilibili.png
# Spotify策略组
static=Spotify, direct, proxy, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Spotify.png
# 网易云音乐策略组
static=网易云音乐, direct, proxy, reject, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Netease_Music.png
# 爱奇艺策略组
static=爱奇艺, direct, proxy, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/iQIYI.png
# Telegram策略组
static=Telegram, proxy, direct, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Telegram.png
# YouTube策略组
static=YouTube, proxy, direct, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/YouTube.png
# TikTok策略组
static=TikTok, proxy, direct, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/TikTok.png
# 迪士尼策略组
static=迪士尼, proxy, direct, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Disney+.png
# Netflix策略组
static=Netflix, proxy, direct, reject, 节点选择, 香港节点, 台湾节点, 日本节点, 新加坡节点, 美国节点, server-tag-regex=. , img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/Netflix.png
# 广告拦截策略组
static=广告拦截, reject, direct, img-url=https://github.com/yuji01/quantumuitx-icon/raw/master/IconSet/AdBlack.png
;static = policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png
;available = policy-name-2, Sample-A, Sample-B, Sample-C
;round-robin = policy-name-3, Sample-A, Sample-B, Sample-C
;ssid = policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C
# ssid = SSID, 节点选择, 节点选择, 2201:DIRECT
# 策略=策略组名，切到移动数据时使用的策略，切到非指定wifi所切换的策略，指定的wifi名称：指定wifi选择的策略
# 其实还可以这样改 ssid = xxxx, SS1, SS2, wifiname1:direct,192.198.1.100:direct
;static = policy-name-5, resource-tag-regex=^sample, server-tag-regex=^example, img-url=http://example.com/icon.png
;available = policy-name-6, resource-tag-regex=^sample, server-tag-regex=^example
;round-robin = policy-name-7, resource-tag-regex=^sample, server-tag-regex=^example
;dest-hash = policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example
;url-latency-benchmark = policy-name-9, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, alive-checking=false, tolerance=0

#
# 参数“tag”和“enabled”是可选的。
# 各种远程资源的默认同步间隔为 86400 秒。
# 您可以设置 update-interval=172800 来自定义您的自动同步间隔（秒），负数表示禁用自动同步。
# 如果设置了 require-devices，则仅当当前 Quantumult 设备 ID 属于 require-devices 时才会加载此行配置。 Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
#
[server_remote]
# 远程节点
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, opt-parser=true, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.snippet, update-interval=-1, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server-complete.snippet, tag=Sample-02, as-policy=static, img-url=http://example.com/icon.png, enabled=false
;https://example.com/server.snippet, tag=Sample-03, img-url=http://example.com/icon.png, require-devices=ID1, ID2, enabled=false

#
# 参数“tag”、“force-policy”和“enabled”是可选的。
# 当有 force-policy 时，将忽略远程资源过滤器中的策略，使用 force-policy。
[filter_remote]
## 远程分流规则订阅
## 将网络请求进行分流，网络请求的走向(是否能成功访问)由匹配到的策略组决定
# 部分规则有先后顺序要求
# 苹果分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Apple.list, tag=Apple, force-policy=Apple, update-interval=86400, opt-parser=false, enabled=true
# 哔哩哔哩分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Domestic/BiliBili.list, tag=bilibili, force-policy=哔哩哔哩, update-interval=86400, opt-parser=false, enabled=true
# 网易云分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Domestic/NeteaseMusic.list, tag=网易云音乐, force-policy=网易云音乐, update-interval=86400, opt-parser=false, enabled=true
# 爱奇艺分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Domestic/iQiyi.list, tag=爱奇艺, force-policy=爱奇艺, update-interval=86400, opt-parser=false, enabled=true
# 国内网站分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Region/China.list, tag=国内网站, force-policy=direct, update-interval=86400, opt-parser=false, enabled=true
# Spotify分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/Spotify.list, tag=Spotify, force-policy=Spotify, update-interval=86400, opt-parser=false, enabled=true
# Telegram分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/SNS/Telegram.list, tag=Telegram, force-policy=Telegram, update-interval=86400, opt-parser=false, enabled=true
# YouTube分流
https://raw.githubusercontent.com/yuji01/qx/main/filter_remote/youtube.txt, tag=YouTube, force-policy=YouTube, update-interval=86400, opt-parser=false, enabled=true
# TikTok分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/Tiktok.list, tag=Tiktok, force-policy=TikTok, update-interval=86400, opt-parser=false, enabled=true
# 迪士尼分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/DisneyPlus.list, tag=迪士尼+, force-policy=迪士尼, update-interval=86400, opt-parser=false, enabled=true
# Netflix分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/Netflix.list, tag=Netflix, force-policy=Netflix, update-interval=86400, opt-parser=false, enabled=true
# 国外网站分流
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Region/Global.list, tag=国外网站, force-policy=节点选择, update-interval=86400, opt-parser=false, enabled=true
https://limbopro.com/Adblock4limbo.list, tag=毒奶特供, force-policy=广告拦截, update-interval=86400, opt-parser=false, enabled=true
# 广告分流
https://raw.githubusercontent.com/yuji01/qx/main/filter_remote/AD_Block.txt, tag=野比(AD_Block), force-policy=广告拦截, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/NobyDa/ND-AD/master/QuantumultX/AD_Block_Plus.txt, tag=野比(AD_Block_Plus)会拦截YouTube记录, force-policy=广告拦截, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Advertising/AdReject.list, tag=AdReject, force-policy=广告拦截, update-interval=86400, opt-parser=false, enabled=true
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/filter.snippet, tag=Sample, force-policy=your-policy-name, enabled=true
;https://example.com/filter.snippet, tag=Sample, force-policy=your-policy-name, require-devices=ID1, ID2, enabled=true

#
# 参数“tag”和“enabled”是可选的。
#
[rewrite_remote]
https://limbopro.com/Adblock4limbo.conf, tag=毒奶特供, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=神机去Youtube广告重写订阅, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/Advertising.conf, tag=神机去广告重写订阅, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/AdvertisingPlus.conf, tag=神机去广告plus重写订阅, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Rewrite_lhie1.conf, tag=野比（lhie1 Rewrite）, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js.conf, tag=野比（js）, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/Neurogram-R/Quantumult-X/main/snippet/Dualsub.snippet, tag=快捷指令-字幕翻译, update-interval=86400, opt-parser=false, enabled=true
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rewrite/Rewrite_General.conf, tag=sve1r重写1, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rewrite/Rewrite.conf, tag=sve1r重写2, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rewrite/Rewrite_FakeSite.conf, tag=sve1r重写3, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/sve1r/Rules-For-Quantumult-X/develop/Rewrite/Rewrite_CornersHua.conf, tag=sve1r重写4, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Quantumult-X/TikTok-TW.conf, tag=TikTok解锁-台湾, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Quantumult-X/TikTok-JP.conf, tag=TikTok解锁-日本, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Quantumult-X/TikTok-US.conf, tag=TikTok解锁-美国, update-interval=86400, opt-parser=false, enabled=false
https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Quantumult-X/TikTok-KR.conf, tag=TikTok解锁-韩国, update-interval=86400, opt-parser=false, enabled=false
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-import-rewrite.snippet, tag=Sample, enabled=true
;https://example.com/rewrite.snippet, tag=Sample, require-devices=ID1, ID2, enabled=true

#
# 只有 obfs=http、obfs=ws、obfs=wss 可以有可选的“obfs-uri”字段。
# wss 中的 obfs-host 参数将用于 TLS 握手和 HTTP 标头主机字段，如果未为 wss 设置 obfs-host，则将使用服务器地址。
# 当使用 obfs=ws 和 obfs=wss 时，服务器端可以通过 mux = 0 的 v2ray-plugin 或 v2ray-core 或 trojan-go 部署。
# 值得注意的是shadowsocks的udp-over-tcp只有部署了shadowsocksr python版本的服务器才支持，其他版本只支持UDP中继本身。 如果您将udp-relay和udp-over-tcp 用于 shadowsocks，则必须确保您的服务器部署了 shadowsocksr python 版本。
# 值得注意的是，obfs=tls 与 obfs=over-tls 不同。 obfs=tls 是shadowsocks项目相关的混淆插件，只是对TLS协议的混淆。 obfs=over-tls 是 TLS 协议。 Quantumult X 支持它们两者的 shadowsocks。
# obfs插件tls1.2_ticket_auth比tls1.2_ticket_fastauth和obfs tls多一个RTT，你最好用tls1.2_ticket_fastauth代替。
# chacha20-ietf-poly1305 和 chacha20-poly1305 方法在VMess配置中效果相同。
# 用于 SSL pinning 的 tls-cert-sha256 或 tls-pubkey-sha256 可以通过 openssl 使用以下命令生成：
# openssl x509 -noout -fingerprint -sha256 -inform pem -in your-cert.pem
# openssl x509 -inform pem -pubkey -noout < your-cert.pem | openssl pkey -pubin -outform der | openssl dgst -sha256
# 如果 tls-verification 为 false，则 tls-cert-sha256 和 tls-pubkey-sha256 将被忽略。
# 如果设置了 tls-pubkey-sha256，则 tls-cert-sha256 将被忽略。
# tls13 参数已被弃用（自 v1.0.26 起已弃用），无论您设置什么，始终支持 TLS 版本 1.3。
#
[server_local]
# 本地节点
#
#---ss/ssr节点编写---
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-obfs-http-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-obfs-http-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-obfs-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, fast-open=false, udp-relay=false, tag=ss-tls-01
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=over-tls, obfs-host=bing.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=ss-tls-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
;shadowsocks=example.com:80, method=chacha20, password=pwd, fast-open=false, udp-relay=true, udp-over-tcp=true, tag=ss-udp-over-tcp
#
#---v2ray节点编写---
# To disable aead header for vmess, just set aead=false, the default value is true. If your server(V2Ray) version is less than v4.28 please set aead=false
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, aead=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=vmess-http
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03
#
#---http节点编写---
# The obfs field is not supported for http
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=http-tls-02
#
#---socks节点编写---
;socks5=example.com:80,fast-open=false, udp-relay=false, tag=socks5-01
;socks5=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=socks5-02
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=socks5-tls-01
;socks5=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, fast-open=false, udp-relay=false, tag=socks5-tls-02
#
#---trojan节点编写---
# The obfs field is only supported with websocket over tls for trojan. When using websocket over tls you should not set over-tls and tls-host options anymore, instead set obfs=wss and obfs-host options.
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-cert-sha256=b0088370d6c8e02d6e38c443abf81be2aaf1e18f00435aaf0b39852c338f7aaa, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-05
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls-pubkey-sha256=eb5ec6684564fd0d04975903ed75342d1b9fdc2096ea54b4cf8caf4740f4ae25, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-06
;trojan=192.168.1.1:443, password=pwd, obfs=wss, obfs-host=example.com, obfs-uri=/path, udp-relay=true, tag=trojan-wss-05

[filter_local]
ip-cidr, 172.168.100.1/24, direct
# 本地分流
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
# 本地走直连
host-suffix, local, direct
;host-suffix, googleapis.com, proxy
;host-suffix, googleapis.com, proxy, force-cellular
;host-suffix, googleapis.com, proxy, multi-interface
;host-suffix, googleapis.com, proxy, multi-interface-balance
;host-suffix, googleapis.com, proxy, via-interface=pdp_ip0
;ip6-cidr, 2001:4860:4860::8888/32, direct
;ip-cidr, 10.0.0.0/8, direct
;ip-cidr, 127.0.0.0/8, direct
;ip-cidr, 172.16.0.0/12, direct
;ip-cidr, 192.168.0.0/16, direct
;ip-cidr, 224.0.0.0/24, direct
;geoip, cn, direct
;geoip, cn, direct, force-cellular
final, 节点选择


#
# “reject”返回 HTTP 状态码 404，没有内容。 这种类型的重写对短时间内的重复请求具有某种动态延迟（0~5秒）的响应机制。 重复次数越少，延迟越短 (0)。 重复次数越多，延迟越大 (5)。
# “reject-200”返回没有内容的 HTTP 状态码 200。
# “reject-img”返回 HTTP 状态码 200，内容为 1px gif。
# “reject-dict”返回 HTTP 状态码 200，内容为空 json 对象。
# “reject-array”返回 HTTP 状态码 200，内容为空 json 数组。
# "request-header" 适用于所有 http 标头，而不仅仅是一个标头，因此您可以在一个正则表达式中匹配两个或多个标头，包括 CRLF。
# "echo-response" 只是回复匹配 URL 的内容类型响应的正文，正文文件应保存在 "On My iPhone - Quantumult X - Data"。
# 如果“rewrite”是body相关的，长度和编码相关的HTTP头域会被Quantumult自动处理，所以不要自己处理。 对于script-response-body，支持的最大原始响应正文大小为 4 MB（iOS 13+）。
# The body related rewrite will not be executed if the body is empty.
# 如果body为空，则不会执行body相关的rewrite。
# 在重写中使用javascript时，你可以使用这些对象：$request、$response、$notify(title, subtitle, message)、console.log(message)和Quantumult的内置对象都有前缀“$”。

# 支持：$request.sessionIndex, $request.scheme, $request.method, $request.url, $request.path, $request.headers,$response.sessionIndex, $response.statusCode, $response.headers, $response.body
# 当响应与请求相关时，$request.sessionIndex 等于 $response.sessionIndex。 sessionIndex 与橙色“活动”面板中的 TCP 记录索引无关。
# 如果启用了 Quantumult 通知，$notify(title, subtitle, message) 将发布 iOS 通知。
# $prefs 用于持久存储：$prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues()。
# console.log(message) 会将日志输出到 Quantumult 日志文件。
# setTimeout(function() { }, interval) 将在 interval(ms) 之后运行函数。
# script-request-header、script-request-body、script-response-header、script-response-body、script-echo-response和script-analyze-echo-response的脚本应该保存在本地“在我的iPhone上 - Quantumult X - 脚本”或“iCloud Drive - Quantumult X - 脚本”。 示例可以在 https://github.com/crossutility/Quantumult-X 找到
# script-analyze-echo-response 和 script-echo-response 的区别在于前者会等待请求体。
#
[rewrite_local]
# Sub-Store
^https?:\/\/sub\.store url script-analyze-echo-response https://raw.githubusercontent.com/Peng-YM/Sub-Store/master/backend/sub-store.min.js
;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js



#
# 如果设置了require-devices，这行配置只会在当前Quantumult设备ID属于require-devices时加载。 Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
# $task.fetch() 组成一个 HTTP 请求并处理响应，只支持文本体。 如果您想要串行请求而不是当前请求，则可以将 $task.fetch() 嵌入到另一个 $task.fetch() 的完成处理程序中。
# 脚本应保存在本地“在我的 iPhone - Quantumult X - 脚本”或“iCloud Drive - Quantumult X - 脚本”中。 示例可以在 https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js 找到
# 默认HTTP请求超时时间为10秒。
#
# 支持 cron 的 5 或 6 个字段，不包括命令字段。 event-network 将在网络更改时触发。 当用户点击 UIAction 时将触发事件交互。 只有在 Quantumult X Tunnel 运行时才能触发事件相关任务。
#
[task_local]
# 任务脚本
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP查询, img-url=location.fill.viewfinder.system, enabled=false
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag=流媒体解锁检测, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/GMedia.png, enabled=false
event-interaction https://raw.githubusercontent.com/NobyDa/Script/master/JD-DailyBonus/JD_DailyBonus.js, tag=京东多合一签到(by NobyDA, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/taskicon/JD02.png, enabled=false
event-interaction https://raw.githubusercontent.com/ChuheGit/1/main/Script/jd_scripts/jd_bean_change.js, tag=京豆变动通知, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/taskicon/JD02.png, enabled=false
event-interaction https://raw.githubusercontent.com/NobyDa/Script/master/iQIYI-DailyBonus/iQIYI.js, tag=爱奇艺会员签到(by NobyDA, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/taskicon/Aiqiyi.png, enabled=false
event-interaction https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/script/luka/luka_signin.js, tag=Luka阅读养成每日签到, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/taskicon/Luka.png, enabled=false

;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true
;* * * * * sample-task3.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, require-devices=ID1, ID2, enabled=true
;event-network sample-task3.js
;event-interaction sample-task4.js


#
# 部署本地HTTP服务器，使用JavaScript进行数据处理。
# 如果设置了require-devices，这行配置只会在当前Quantumult设备ID属于require-devices时加载。 Quantumult 设备 ID 可在“设置 - 其他设置 - 关于”中找到。
# 输入变量为$reqeust.url, $reqeust.path, $reqeust.headers, $reqeust.body
# 输出使用 $done like $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") 来发回响应。
# 此外，您可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署完成后通过http://127.0.0.1:9999/your-path/your-api/访问。
#
[http_backend]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;sample.js, tag=sample, path=^/sample/v1/, require-devices=ID1, ID2, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


#
# 只有“主机名”中的 TLS SNI 或目标地址将由 MitM 处理。
#
# 默认情况下，当为 HTTPS 请求启用 MitM 时，Quantumult X 从原始站点获取证书（证书将被缓存），保留大部分需要的原始证书信息并使用 MitM 根 CA 重新签名，这是 创建中间人证书的推荐（和更兼容）方式。
# 偶尔有些用户喜欢调试它的域不存在的HTTPS请求，所以原来的证书甚至都不存在。 这是参数 simple_cert_hostname 出现的时候。 带有 simple_cert_hostname（和主机名）中的 TLS SNI 名称的 HTTPS 请求将使用纯本地生成的 MitM 证书。
#
# 重要的 ！！！ 您应该始终将您的 CA 密码和 p12 保密。
#
[mitm]

;passphrase =
;p12 =
;skip_validating_cert = false
;force_sni_domain_name = false
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com
;simple_cert_hostname = non-existed-domain.com, *.non-connected-domain.com
